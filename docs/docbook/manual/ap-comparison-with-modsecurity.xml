<?xml version="1.0" encoding="UTF-8"?>
<appendix version="5.0" xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml" xml:id="comparison-with-modsecurity">
    <title>Comparison with ModSecurity</title>
    <para>IronBee was designed and implemented by the team originally responsible for ModSecurity.
        Because of this, you will see some similarity in concepts and terms. However, IronBee is not
        a fork of ModSecurity, but rather a completely new design built on the experience from
        working on ModSecurity. This section describes both similarities and differences in design,
        implementation and configuration. Those moving from ModSecurity to IronBee should find this
        a useful guide to quickly get you started using IronBee.</para>
    <section>
        <title>Design and Implementation</title>
        <para>In concept, ModSecurity and IronBee are not that different. Both provide a means for
            inspecting HTTP transactions. They do this by exposing parsed HTTP data which can be
            inspected by various means. Actions can then be taken such as logging or interrupting a
            transaction. In design, however, ModSecurity and IronBee differ greatly.</para>
        <para>ModSecurity was designed to be run as an Apache Webserver module and thus requires the
            Apache Webserver API to execute. While the project has since abstracted this Apache
            Webserver API and used this to port to other webservers, these ports are still
            experimental and not full featured. ModSecurity is limited to being configured by the
            native webserver configuration language.</para>
        <para>IronBee was designed as a highly portable framework which can easily be extended and
            embedded. At the core, IronBee is just a shared library which exposes an API and allows
            loading external modules to extend functionality. The framework separates data
            acquisition and configuration from its core. What this means, is that IronBee does not
            dictate how it acquires HTTP data, nor how you define rules - these are done outside of
            IronBee. IronBee is configured in its own configuration file, not the configuration of
            the server in which it is embedded. This has a few benefits: configuration is not
            limited by the native config language, configuration is not intertwined (potentially
            conflicting) with the webserver, and IronBee is configured the same (can share
            configuration) across different server types.</para>
        <para>Server plugins load the IronBee library and pass it data. IronBee's rule languages are
            defined by loadable modules. Because of this, IronBee is capable of being embedded into
            anything that can pass it data and rules can be written in various different forms -
            including programmatically. Currently IronBee supports being embedded in Apache
            TrafficServer, Apache Webserver, Nginx, Taobao Tengine (nginx fork) as well as a command
            line tool that accepts various formats as input such as raw HTTP, pcap files, etc.
            Porting to other platforms is relatively simple. IronBee rules can currently be written
            in a simplistic rule (signature) language, which is similar to ModSecurity, configured
            via the Lua language (though executed in the C engine), or written in pure Lua. IronBee
            can be extended with modules written in C, C++ or Lua.</para>
    </section>
    <section>
        <title>Configuration</title>
        <para>Unlike ModSecurity, which is configured within the webserver configuration language,
            IronBee is configured primarily in its own configuration language, with only a bare
            minimum configuration done within the server. While there is a full configuration
            language available for IronBee, the configuration is exposed via an API, so the entire
            configuration can also be done programatically within a module if so desired (limited
            support is already available via lua modules). There are two primary differences between
            configuring ModSecurity and IronBee. IronBee defines sites/locations separate from the
            webserver, and the IronBee rule language differs from ModSecurity. The differences in
            the Rule language are discussed here.</para>
        <para>Included in the IronBee distribution is a script to translate ModSecurity rules to
            IronBee syntax. While this script cannot translate some complex logic, it may aide in
            translation. The script reads stdin and outputs to stdout, translating rules keeping
            comments and indention
            intact.<programlisting>./ib_convert_modsec_rules.pl &lt;modsec_rules.conf >ironbee_rules.conf</programlisting></para>
        <para>
            <table border="1" width="100%">
                <caption>Rule Language Comparison</caption>
                <tr valign="top">
                        <th align="center">IronBee</th>
                        <th align="center">ModSecurity</th>
                    </tr>
                    <tr valign="top">
                    <td>
                        <para>General Terminology:<itemizedlist>
                                <listitem>
                                    <para><emphasis>Data Field:</emphasis> Data associated with a
                                        name.</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>Operator:</emphasis> A named operation performed
                                        on a field.</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>Modifier:</emphasis> A generic term for a named
                                        item modifying a rule such as rule metadata or an action to
                                        execute.</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>Metadata:</emphasis> Name and value associated
                                        with a rule.</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>Action:</emphasis> A named operation to be
                                        execute based on the rule operator result. Actions can be
                                        executed on the operator returning either true or
                                        false.</para>
                                </listitem>
                            </itemizedlist></para>
                    </td>
                    <td>
                        <para>General Terminology:<itemizedlist>
                                <listitem>
                                    <para><emphasis>Target:</emphasis> Data associated with a
                                        name.</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>Operator:</emphasis> A named operation performed
                                        on a field.</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>Metadata:</emphasis> Name and value associated
                                        with a rule.</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>Action:</emphasis> A named operation to be
                                        execute on the rule operator returning true. Can be either
                                        disruptive on non-disruptive.</para>
                                </listitem>
                            </itemizedlist></para>
                    </td>
                </tr>
                <tr valign="top">
                        <td><para>General Rule
                            Syntax:<programlisting>Rule FIELDS @operator param modifiers
Action modifiers</programlisting>Fields
                            are a whitespace separated list of field specifications,
                            operators take a single parameter, and modifiers are a
                            whitespace separated list of name:value
                            pairs.</para><para>Example:<programlisting>Rule ARGS:a ARGS:b @rx foo|bar id:1 "msg:Test rule" event block</programlisting></para></td>
                        <td><para>General Rule
                            Syntax:<programlisting>SecRule TARGETS operator actions
SecAction actions</programlisting>Targets
                            are a pipe separated list of target specifications, an operator
                            is a '@' prefixed operator name followed by parameters, and
                            actions are a comma separated list of name:value
                            pairs.</para><para>Example:<programlisting>SecRule ARGS:a|ARGS:b "@rx foo|bar" "id:1,msg:'Test rule',log,block"</programlisting></para></td>
                    </tr>
                <tr valign="top">
                        <td><para>Field Transformations:</para>
                            <para>IronBee allows transformations to be
                                applied to each field individually in addition to using
                                transformations specified as a rule modifier.</para>
                            <para>Count of
                                variables within the ARGS
                                collection:<programlisting>ARGS.count()</programlisting>
                                Length of all ARGS starting with an
                                "a":<programlisting>ARGS:/^a/.length()</programlisting> Trim and
                                lowercase all ARGS named
                                x:<programlisting>ARGS:x.trim().lowercase()</programlisting></para></td>
                        <td><para>Target Operators:</para><para>ModSecurity only allows for
                            transformations specified for all targets, except for special
                            length and count target
                            operators.</para><para>Count of variables within the ARGS collection:<programlisting>&amp;ARGS</programlisting>
                                Length of all ARGS starting with an
                                "a":<programlisting>#ARGS:/^a/</programlisting></para></td>
                    </tr>
                <tr valign="top">
                        <td><para>Captured data defaults to CAPTURE collection, but the collection name can be specified. In
                            addition, some operators support capturing all matches, not just
                            the first match.</para>
                            <para>Capture the first element of the path into
                                <literal>CAPTURE:1</literal> and the full match into
                                <literal>CAPTURE:0</literal></para>
                            <para>
                                <programlisting>Rule REQUEST_URI_PATH @rx "^/*([^/]*)" id:1 capture</programlisting>
                            </para>
                            <para>The same as above, but capture to <literal>PATH:1</literal>
                                and the full match into
                                <literal>PATH:0</literal><programlisting>Rule REQUEST_URI_PATH @rx "^/*([^/]*)" id:1 capture:PATH</programlisting></para>
                            <para>Capture all path elements into <literal>PATH</literal> (the
                                @dfa operator finds all matches by
                                default)<programlisting>Rule REQUEST_URI_PATH @dfa "[^/]+" id:1 capture:PATH</programlisting></para>
                            <para>Capture anything that looks like a credit card number from the
                                response body into the <literal>CC</literal>
                                collection:<programlisting>StreamInspect RESPONSE_BODY_STREAM @dfa "\d{15,16}" id:1 capture:CC</programlisting></para></td>
                        <td><para>Captured data is limited to the first 9 captures and is stored in
                            the fixed TX collection.</para>
                            <para>Capture the first element of the path into
                                <literal>TX:1</literal> and the full match into
                                <literal>TX:0</literal></para>
                            <para>
                                <programlisting>SecRule REQUEST_PATH "@rx ^/*([^/]*)" "id:1,capture"</programlisting>
                            </para></td>
                        <td/>
                    </tr>
            </table>
        </para>
    </section>
    <section>
        <title>Rules</title>
        <itemizedlist>
            <listitem>
                <para>The main rule directive is shortened, to just <literal>Rule</literal>. All
                    other supported directives from ModSecurity also have the <literal>Sec</literal>
                    prefix removed.</para>
            </listitem>
            <listitem>
                <para>In chained rules, instructions (known as disruptive actions in ModSecurity)
                    are specified on the last rule in the chain, not on the first; the rule metadata
                    remains with the first rule in the chain.</para>
            </listitem>
            <listitem>
                <para>There are no default transformations, which means that it is no longer
                    necessary to begin rules with <literal>t:none</literal>.</para>
            </listitem>
            <listitem>
                <para>The <literal>SecRuleScript</literal> functionality is now handled by
                        <literal>RuleRunExt</literal>, which works as an interface between the rule
                    language and externally-implemented security logic (for example, Lua rules,
                    rules implemented natively, etc). </para>
            </listitem>
            <listitem>
                <para>Run-time rule manipulation (using <literal>ctl:ruleRemoveById</literal> or
                        <literal>ctl:ruleUpdateTagetById</literal>) is not currently supported.
                    These features are slow in ModSecurity and we wish to rethink them before and if
                    we implement them. At the very least we will wish to provide a faster
                    implementation.</para>
            </listitem>
            <listitem>
                <para>Changing rule flow at run-time is not supported at this time. This means that
                    the functionality of <literal>skip</literal>, <literal>skipAfter</literal>, and
                        <literal>SecMarker</literal> is not supported. Neither is that of
                        <literal>SecAction</literal>, which is commonly used with skipping.</para>
            </listitem>
            <listitem>
                <para>IronBee uses a simplified configuration model in which site configuration
                    always starts from scratch. Inheritance is used when location contexts are
                    created, but, unlike in ModSecurity, locations always inherit configuration from
                    their sites.</para>
            </listitem>
            <listitem>
                <para>There is no ability to update rule targets and actions at configure-time, but
                    we will probably implement a similar feature in the future.</para>
            </listitem>
            <listitem>
                <para>All rules that generate events must use the <literal>msg</literal> modifier to
                    provide a message. This is because IronBee does not use machine-generated rule
                    messages. In ModSecurity, machine-generated messages have shown to have little
                    value, especially as rules increase in complexity. They are often a source of
                    confusion.</para>
            </listitem>
        </itemizedlist>
    </section>
    <section>
        <title>Miscellaneous</title>
        <para>
            <itemizedlist>
                <listitem>
                    <para>The audit log format has been redesigned to support new features.</para>
                </listitem>
                <listitem>
                    <para><literal>SecArgumentSeparator</literal> is implemented as a personality
                        parameter (see <literal>PersonalityParam</literal> for more
                        information).</para>
                </listitem>
                <listitem>
                    <para>In IronBee, request and response body inspection is not tied to buffering.
                        Disabling buffering will generally not affect inspection; it will only
                        affect the ability to block attacks reliably.</para>
                </listitem>
                <listitem>
                    <para>In IronBee, like in ModSecurity, you can have a transaction blocked if the
                        buffer limit is encountered, but, you can also choose to continue to use the
                        buffer in circular fashion. In that case, IronBee will simply buffer as much
                        data as it can, allowing any overflowing data to pass through.</para>
                </listitem>
            </itemizedlist>
        </para>
    </section>
    <section>
        <title>Features Not Supported (Yet)</title>
        <itemizedlist>
            <listitem>
                <para>Content injection - will be added in the future</para>
            </listitem>
            <listitem>
                <para>Guardian log - will not implement this obsolete feature</para>
            </listitem>
            <listitem>
                <para>XML support - will be added in the future</para>
            </listitem>
            <listitem>
                <para>Persistent storage - will be added in the future (with high priority)</para>
            </listitem>
            <listitem>
                <para>Chroot support - will not implement this <filename>httpd</filename>&#8211;specific
                    feature</para>
            </listitem>
            <listitem>
                <para>File upload inspection and extraction - will be added in the future</para>
            </listitem>
            <listitem>
                <para>Anti-DoS features are not supported, and we don't expect they will be in the
                    future</para>
            </listitem>
        </itemizedlist>
    </section>

</appendix>
