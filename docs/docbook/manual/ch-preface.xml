<?xml version="1.0" encoding="UTF-8"?>
<preface version="5.0" xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml" xml:id="preface">
    <title>Preface</title>
    <para>IronBee is a universal web application security framework. Think of IronBee as a framework
        for developing a system for securing web applications - a framework for building a web
        application firewall (WAF) if you will.</para>
    <para>IronBee was conceived and implemented by both the original author (Ivan RistiÄ‡) and
        maintainer (Brian Rectanus) of the popular open source WAF, ModSecurity (<link
            xlink:href="https://www.modsecurity.org/">www.modsecurity.org</link>), however,
        ModSecurity is now run by the TrustWave SpiderLabs team and in no way associated with
        IronBee. Because of the authors' previous work on ModSecurity, there are some similarities
        in IronBee concepts, however IronBee was built with an entirely different set of goals. More
        on the similarities and difference between ModSecurity and IronBee can be found in <xref
            linkend="comparison-with-modsecurity"/>.</para>
    <para>IronBee started in July 2010 through the generous support of Qualys, Inc (<link
            xlink:href="https://www.qualys.com/">www.qualys.com</link>). The idea was to build a
        highly portable web application security framework for the community with a license that was
        compatible with business. IronBee was not intended to be a complete WAF, but rather, be a
        framework for building a WAF. But what does this mean? Essentially IronBee gives you some
        basic WAF functionality, but leaves most of this open to be extended or replaced by
        something more tailored to your environment.</para>
    <para>As a framework, IronBee's goals are to:</para>
    <para>
        <itemizedlist>
            <listitem>
                <para>Be minimalistic in what is contained in the core engine.</para>
                <para>The IronBee core engine does essentially nothing but expose an API and an
                    event subsystem. There is no rule language, there is no inspection and there is
                    only minimal processing of the HTTP transaction cycle. Everything else is left
                    to modules. Load only the modules that provide functionality that is
                    required.</para>
            </listitem>
            <listitem>
                <para>Provide an simple API for data acquisition to allow embedding IronBee in
                    existing and future products.</para>
                <para>Data acquisition is not a part of the IronBee engine. Instead, the engine
                    exposes an API to allow data to be fed to IronBee in various ways. Data
                    acquisition is done through server plugins, which must load the IronBee engine
                    and pass it data. This leaves IronBee open to being embedded in nearly anything
                    that can pass HTTP data to IronBee. Currently IronBee works with the following,
                    but many others are possible:<itemizedlist>
                        <listitem>
                            <para>Apache Web Server 2.x</para>
                        </listitem>
                        <listitem>
                            <para>Apache TrafficServer 3.x</para>
                        </listitem>
                        <listitem>
                            <para>Nginx</para>
                        </listitem>
                        <listitem>
                            <para>Command Line Utility (clipp)</para>
                        </listitem>
                    </itemizedlist></para>
            </listitem>
            <listitem>
                <para>Provide an API to allow extension through external modules.</para>
                <para>To IronBee, modules are everything. Modules utilize the core engine to
                    implement additional functionality. Currently modules can be written in C, C++
                    or Lua, but extending this to other languages is possible as well. What follow
                    is a list of what has been implemented, but anything is possible:<itemizedlist>
                        <listitem>
                            <para>Configuration</para>
                        </listitem>
                        <listitem>
                            <para>Parsing and exposing fields for inspection and logging</para>
                        </listitem>
                        <listitem>
                            <para>Implementing operators, transformations and actions which other
                                modules and rules/signatures can utilize</para>
                        </listitem>
                        <listitem>
                            <para>Rule/signature languages</para>
                        </listitem>
                        <listitem>
                            <para>Inspection modules</para>
                        </listitem>
                        <listitem>
                            <para>Content transformation and modification</para>
                        </listitem>
                        <listitem>
                            <para>Logging</para>
                        </listitem>
                    </itemizedlist></para>
            </listitem>
            <listitem>
                <para>Not tie inspection to a fixed rule/signature language, but rather, allow this
                    to be implemented by modules.</para>
                <para>Different types of inspection require different means. Because of this,
                    IronBee only exposes a generic rule execution engine, but does not dictate the
                    language in which rules are written. Currently, inspection can be performed in
                    three different ways:<itemizedlist>
                        <listitem>
                            <para>Write an ironbee module that hooks into various events generated
                                by the engine. This yields full control, but requires more effort,
                                however this effort is substantially reduced by writing Lua
                                modules.</para>
                        </listitem>
                        <listitem>
                            <para>Use Lua rules. This is slightly less complex that Lua modules.
                                Instead of using the module API, it utilizes the rule engine for
                                execution. This allows the full power of the Lua scripting language,
                                without the complexity of writing a full IronBee module.</para>
                        </listitem>
                        <listitem>
                            <para>Use the IronBee Rule Language. This is a simple language that
                                allows you to write inspection rules (more signatures) against any
                                data fields exposed by other modules. The current language is
                                similar to the ModSecurity Rule Language, but has only a subset of
                                functionality. The rule language is limited by design and allows for
                                simple pattern matches against data fields to trigger
                                actions.</para>
                        </listitem>
                    </itemizedlist></para>
            </listitem>
            <listitem>
                <para>Not limit interaction with external systems.</para>
                <para>Being a framework, IronBee is meant to be embedded and interaction with other
                    systems. Because of this, IronBee does not dictate how it is managed. There is
                    no facility for managing configuration, rules or logs. This is left up to the
                    administrator and/or product that ironbee is embedded in. This does not mean
                    that IronBee does not provide some means for these things, but rather it does
                    not dictate them. While this may seem limiting, it allows for great flexibility
                    in how IronBee is managed. It is certainly possible to replace the file based
                    configuration with one that interacts with a database, to manage rules from an
                    external system and/or write logs to something other than the filesystem.</para>
            </listitem>
        </itemizedlist>
    </para>
    <sidebar><para><emphasis role="bold">About Qualys</emphasis></para>
        <para>Qualys Inc. (NASDAQ: QLYS), is a pioneer and leading provider of cloud security and
            compliance solutions with over 6,000 customers in more than 100 countries, including a
            majority of each of the Forbes Global 100 and Fortune 100. The QualysGuard Cloud Platform
            and integrated suite of solutions helps organizations simplify security operations and lower
            the cost of compliance by delivering critical security intelligence on demand and automating
            the full spectrum of auditing, compliance and protection for IT systems and web
            applications. Founded in 1999, Qualys has established strategic partnerships with leading
            managed service providers and consulting organizations, including Accuvant, BT, Dell
            SecureWorks, Fujitsu, NTT, Symantec, Verizon, and Wipro. The company is also a founding
            member of the Cloud Security Alliance (CSA).</para>
        <para>For more information, please visit
            <link xlink:href="https://www.qualys.com/">www.qualys.com</link>. </para>
    </sidebar>    
</preface>
